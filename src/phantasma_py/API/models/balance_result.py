# coding: utf-8

"""
    Phantasma API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BalanceResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chain': 'str',
        'amount': 'str',
        'symbol': 'str',
        'decimals': 'int',
        'ids': 'list[str]'
    }

    attribute_map = {
        'chain': 'chain',
        'amount': 'amount',
        'symbol': 'symbol',
        'decimals': 'decimals',
        'ids': 'ids'
    }

    def __init__(self, chain=None, amount=None, symbol=None, decimals=None, ids=None):  # noqa: E501
        """BalanceResult - a model defined in Swagger"""  # noqa: E501
        self._chain = None
        self._amount = None
        self._symbol = None
        self._decimals = None
        self._ids = None
        self.discriminator = None
        if chain is not None:
            self.chain = chain
        if amount is not None:
            self.amount = amount
        if symbol is not None:
            self.symbol = symbol
        if decimals is not None:
            self.decimals = decimals
        if ids is not None:
            self.ids = ids

    @property
    def chain(self):
        """Gets the chain of this BalanceResult.  # noqa: E501


        :return: The chain of this BalanceResult.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this BalanceResult.


        :param chain: The chain of this BalanceResult.  # noqa: E501
        :type: str
        """

        self._chain = chain

    @property
    def amount(self):
        """Gets the amount of this BalanceResult.  # noqa: E501


        :return: The amount of this BalanceResult.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BalanceResult.


        :param amount: The amount of this BalanceResult.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def symbol(self):
        """Gets the symbol of this BalanceResult.  # noqa: E501


        :return: The symbol of this BalanceResult.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this BalanceResult.


        :param symbol: The symbol of this BalanceResult.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def decimals(self):
        """Gets the decimals of this BalanceResult.  # noqa: E501


        :return: The decimals of this BalanceResult.  # noqa: E501
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this BalanceResult.


        :param decimals: The decimals of this BalanceResult.  # noqa: E501
        :type: int
        """

        self._decimals = decimals

    @property
    def ids(self):
        """Gets the ids of this BalanceResult.  # noqa: E501


        :return: The ids of this BalanceResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this BalanceResult.


        :param ids: The ids of this BalanceResult.  # noqa: E501
        :type: list[str]
        """

        self._ids = ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BalanceResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BalanceResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
