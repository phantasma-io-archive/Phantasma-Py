# coding: utf-8

"""
    Phantasma API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kind': 'AddressKind',
        'is_system': 'bool',
        'is_interop': 'bool',
        'is_user': 'bool',
        'tendermint_address': 'str',
        'tendermint_public_key': 'str',
        'is_null': 'bool',
        'text': 'str',
        'platform_id': 'int'
    }

    attribute_map = {
        'kind': 'kind',
        'is_system': 'isSystem',
        'is_interop': 'isInterop',
        'is_user': 'isUser',
        'tendermint_address': 'tendermintAddress',
        'tendermint_public_key': 'tendermintPublicKey',
        'is_null': 'isNull',
        'text': 'text',
        'platform_id': 'platformID'
    }

    def __init__(self, kind=None, is_system=None, is_interop=None, is_user=None, tendermint_address=None, tendermint_public_key=None, is_null=None, text=None, platform_id=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        self._kind = None
        self._is_system = None
        self._is_interop = None
        self._is_user = None
        self._tendermint_address = None
        self._tendermint_public_key = None
        self._is_null = None
        self._text = None
        self._platform_id = None
        self.discriminator = None
        if kind is not None:
            self.kind = kind
        if is_system is not None:
            self.is_system = is_system
        if is_interop is not None:
            self.is_interop = is_interop
        if is_user is not None:
            self.is_user = is_user
        if tendermint_address is not None:
            self.tendermint_address = tendermint_address
        if tendermint_public_key is not None:
            self.tendermint_public_key = tendermint_public_key
        if is_null is not None:
            self.is_null = is_null
        if text is not None:
            self.text = text
        if platform_id is not None:
            self.platform_id = platform_id

    @property
    def kind(self):
        """Gets the kind of this Address.  # noqa: E501


        :return: The kind of this Address.  # noqa: E501
        :rtype: AddressKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Address.


        :param kind: The kind of this Address.  # noqa: E501
        :type: AddressKind
        """

        self._kind = kind

    @property
    def is_system(self):
        """Gets the is_system of this Address.  # noqa: E501


        :return: The is_system of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._is_system

    @is_system.setter
    def is_system(self, is_system):
        """Sets the is_system of this Address.


        :param is_system: The is_system of this Address.  # noqa: E501
        :type: bool
        """

        self._is_system = is_system

    @property
    def is_interop(self):
        """Gets the is_interop of this Address.  # noqa: E501


        :return: The is_interop of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._is_interop

    @is_interop.setter
    def is_interop(self, is_interop):
        """Sets the is_interop of this Address.


        :param is_interop: The is_interop of this Address.  # noqa: E501
        :type: bool
        """

        self._is_interop = is_interop

    @property
    def is_user(self):
        """Gets the is_user of this Address.  # noqa: E501


        :return: The is_user of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._is_user

    @is_user.setter
    def is_user(self, is_user):
        """Sets the is_user of this Address.


        :param is_user: The is_user of this Address.  # noqa: E501
        :type: bool
        """

        self._is_user = is_user

    @property
    def tendermint_address(self):
        """Gets the tendermint_address of this Address.  # noqa: E501


        :return: The tendermint_address of this Address.  # noqa: E501
        :rtype: str
        """
        return self._tendermint_address

    @tendermint_address.setter
    def tendermint_address(self, tendermint_address):
        """Sets the tendermint_address of this Address.


        :param tendermint_address: The tendermint_address of this Address.  # noqa: E501
        :type: str
        """

        self._tendermint_address = tendermint_address

    @property
    def tendermint_public_key(self):
        """Gets the tendermint_public_key of this Address.  # noqa: E501


        :return: The tendermint_public_key of this Address.  # noqa: E501
        :rtype: str
        """
        return self._tendermint_public_key

    @tendermint_public_key.setter
    def tendermint_public_key(self, tendermint_public_key):
        """Sets the tendermint_public_key of this Address.


        :param tendermint_public_key: The tendermint_public_key of this Address.  # noqa: E501
        :type: str
        """

        self._tendermint_public_key = tendermint_public_key

    @property
    def is_null(self):
        """Gets the is_null of this Address.  # noqa: E501


        :return: The is_null of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._is_null

    @is_null.setter
    def is_null(self, is_null):
        """Sets the is_null of this Address.


        :param is_null: The is_null of this Address.  # noqa: E501
        :type: bool
        """

        self._is_null = is_null

    @property
    def text(self):
        """Gets the text of this Address.  # noqa: E501


        :return: The text of this Address.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Address.


        :param text: The text of this Address.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def platform_id(self):
        """Gets the platform_id of this Address.  # noqa: E501


        :return: The platform_id of this Address.  # noqa: E501
        :rtype: int
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id):
        """Sets the platform_id of this Address.


        :param platform_id: The platform_id of this Address.  # noqa: E501
        :type: int
        """

        self._platform_id = platform_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
