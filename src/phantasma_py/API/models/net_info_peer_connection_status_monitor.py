# coding: utf-8

"""
    Phantasma API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetInfoPeerConnectionStatusMonitor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start': 'str',
        'bytes': 'str',
        'samples': 'str',
        'inst_rate': 'str',
        'cur_rate': 'str',
        'avg_rate': 'str',
        'peak_rate': 'str',
        'bytes_rem': 'str',
        'duration': 'str',
        'idle': 'str',
        'time_rem': 'str',
        'progress': 'int',
        'active': 'bool'
    }

    attribute_map = {
        'start': 'start',
        'bytes': 'bytes',
        'samples': 'samples',
        'inst_rate': 'instRate',
        'cur_rate': 'curRate',
        'avg_rate': 'avgRate',
        'peak_rate': 'peakRate',
        'bytes_rem': 'bytesRem',
        'duration': 'duration',
        'idle': 'idle',
        'time_rem': 'timeRem',
        'progress': 'progress',
        'active': 'active'
    }

    def __init__(self, start=None, bytes=None, samples=None, inst_rate=None, cur_rate=None, avg_rate=None, peak_rate=None, bytes_rem=None, duration=None, idle=None, time_rem=None, progress=None, active=None):  # noqa: E501
        """NetInfoPeerConnectionStatusMonitor - a model defined in Swagger"""  # noqa: E501
        self._start = None
        self._bytes = None
        self._samples = None
        self._inst_rate = None
        self._cur_rate = None
        self._avg_rate = None
        self._peak_rate = None
        self._bytes_rem = None
        self._duration = None
        self._idle = None
        self._time_rem = None
        self._progress = None
        self._active = None
        self.discriminator = None
        if start is not None:
            self.start = start
        if bytes is not None:
            self.bytes = bytes
        if samples is not None:
            self.samples = samples
        if inst_rate is not None:
            self.inst_rate = inst_rate
        if cur_rate is not None:
            self.cur_rate = cur_rate
        if avg_rate is not None:
            self.avg_rate = avg_rate
        if peak_rate is not None:
            self.peak_rate = peak_rate
        if bytes_rem is not None:
            self.bytes_rem = bytes_rem
        if duration is not None:
            self.duration = duration
        if idle is not None:
            self.idle = idle
        if time_rem is not None:
            self.time_rem = time_rem
        if progress is not None:
            self.progress = progress
        if active is not None:
            self.active = active

    @property
    def start(self):
        """Gets the start of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501


        :return: The start of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this NetInfoPeerConnectionStatusMonitor.


        :param start: The start of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def bytes(self):
        """Gets the bytes of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501


        :return: The bytes of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :rtype: str
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes):
        """Sets the bytes of this NetInfoPeerConnectionStatusMonitor.


        :param bytes: The bytes of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :type: str
        """

        self._bytes = bytes

    @property
    def samples(self):
        """Gets the samples of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501


        :return: The samples of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :rtype: str
        """
        return self._samples

    @samples.setter
    def samples(self, samples):
        """Sets the samples of this NetInfoPeerConnectionStatusMonitor.


        :param samples: The samples of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :type: str
        """

        self._samples = samples

    @property
    def inst_rate(self):
        """Gets the inst_rate of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501


        :return: The inst_rate of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :rtype: str
        """
        return self._inst_rate

    @inst_rate.setter
    def inst_rate(self, inst_rate):
        """Sets the inst_rate of this NetInfoPeerConnectionStatusMonitor.


        :param inst_rate: The inst_rate of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :type: str
        """

        self._inst_rate = inst_rate

    @property
    def cur_rate(self):
        """Gets the cur_rate of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501


        :return: The cur_rate of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :rtype: str
        """
        return self._cur_rate

    @cur_rate.setter
    def cur_rate(self, cur_rate):
        """Sets the cur_rate of this NetInfoPeerConnectionStatusMonitor.


        :param cur_rate: The cur_rate of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :type: str
        """

        self._cur_rate = cur_rate

    @property
    def avg_rate(self):
        """Gets the avg_rate of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501


        :return: The avg_rate of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :rtype: str
        """
        return self._avg_rate

    @avg_rate.setter
    def avg_rate(self, avg_rate):
        """Sets the avg_rate of this NetInfoPeerConnectionStatusMonitor.


        :param avg_rate: The avg_rate of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :type: str
        """

        self._avg_rate = avg_rate

    @property
    def peak_rate(self):
        """Gets the peak_rate of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501


        :return: The peak_rate of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :rtype: str
        """
        return self._peak_rate

    @peak_rate.setter
    def peak_rate(self, peak_rate):
        """Sets the peak_rate of this NetInfoPeerConnectionStatusMonitor.


        :param peak_rate: The peak_rate of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :type: str
        """

        self._peak_rate = peak_rate

    @property
    def bytes_rem(self):
        """Gets the bytes_rem of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501


        :return: The bytes_rem of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :rtype: str
        """
        return self._bytes_rem

    @bytes_rem.setter
    def bytes_rem(self, bytes_rem):
        """Sets the bytes_rem of this NetInfoPeerConnectionStatusMonitor.


        :param bytes_rem: The bytes_rem of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :type: str
        """

        self._bytes_rem = bytes_rem

    @property
    def duration(self):
        """Gets the duration of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501


        :return: The duration of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this NetInfoPeerConnectionStatusMonitor.


        :param duration: The duration of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def idle(self):
        """Gets the idle of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501


        :return: The idle of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :rtype: str
        """
        return self._idle

    @idle.setter
    def idle(self, idle):
        """Sets the idle of this NetInfoPeerConnectionStatusMonitor.


        :param idle: The idle of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :type: str
        """

        self._idle = idle

    @property
    def time_rem(self):
        """Gets the time_rem of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501


        :return: The time_rem of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :rtype: str
        """
        return self._time_rem

    @time_rem.setter
    def time_rem(self, time_rem):
        """Sets the time_rem of this NetInfoPeerConnectionStatusMonitor.


        :param time_rem: The time_rem of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :type: str
        """

        self._time_rem = time_rem

    @property
    def progress(self):
        """Gets the progress of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501


        :return: The progress of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this NetInfoPeerConnectionStatusMonitor.


        :param progress: The progress of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :type: int
        """

        self._progress = progress

    @property
    def active(self):
        """Gets the active of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501


        :return: The active of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this NetInfoPeerConnectionStatusMonitor.


        :param active: The active of this NetInfoPeerConnectionStatusMonitor.  # noqa: E501
        :type: bool
        """

        self._active = active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetInfoPeerConnectionStatusMonitor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetInfoPeerConnectionStatusMonitor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
