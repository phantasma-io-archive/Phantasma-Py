# coding: utf-8

"""
    Phantasma API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TokenSeriesResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'series_id': 'int',
        'current_supply': 'str',
        'max_supply': 'str',
        'burned_supply': 'str',
        'mode': 'str',
        'script': 'str',
        'methods': 'list[ABIMethodResult]'
    }

    attribute_map = {
        'series_id': 'seriesID',
        'current_supply': 'currentSupply',
        'max_supply': 'maxSupply',
        'burned_supply': 'burnedSupply',
        'mode': 'mode',
        'script': 'script',
        'methods': 'methods'
    }

    def __init__(self, series_id=None, current_supply=None, max_supply=None, burned_supply=None, mode=None, script=None, methods=None):  # noqa: E501
        """TokenSeriesResult - a model defined in Swagger"""  # noqa: E501
        self._series_id = None
        self._current_supply = None
        self._max_supply = None
        self._burned_supply = None
        self._mode = None
        self._script = None
        self._methods = None
        self.discriminator = None
        if series_id is not None:
            self.series_id = series_id
        if current_supply is not None:
            self.current_supply = current_supply
        if max_supply is not None:
            self.max_supply = max_supply
        if burned_supply is not None:
            self.burned_supply = burned_supply
        if mode is not None:
            self.mode = mode
        if script is not None:
            self.script = script
        if methods is not None:
            self.methods = methods

    @property
    def series_id(self):
        """Gets the series_id of this TokenSeriesResult.  # noqa: E501


        :return: The series_id of this TokenSeriesResult.  # noqa: E501
        :rtype: int
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """Sets the series_id of this TokenSeriesResult.


        :param series_id: The series_id of this TokenSeriesResult.  # noqa: E501
        :type: int
        """

        self._series_id = series_id

    @property
    def current_supply(self):
        """Gets the current_supply of this TokenSeriesResult.  # noqa: E501


        :return: The current_supply of this TokenSeriesResult.  # noqa: E501
        :rtype: str
        """
        return self._current_supply

    @current_supply.setter
    def current_supply(self, current_supply):
        """Sets the current_supply of this TokenSeriesResult.


        :param current_supply: The current_supply of this TokenSeriesResult.  # noqa: E501
        :type: str
        """

        self._current_supply = current_supply

    @property
    def max_supply(self):
        """Gets the max_supply of this TokenSeriesResult.  # noqa: E501


        :return: The max_supply of this TokenSeriesResult.  # noqa: E501
        :rtype: str
        """
        return self._max_supply

    @max_supply.setter
    def max_supply(self, max_supply):
        """Sets the max_supply of this TokenSeriesResult.


        :param max_supply: The max_supply of this TokenSeriesResult.  # noqa: E501
        :type: str
        """

        self._max_supply = max_supply

    @property
    def burned_supply(self):
        """Gets the burned_supply of this TokenSeriesResult.  # noqa: E501


        :return: The burned_supply of this TokenSeriesResult.  # noqa: E501
        :rtype: str
        """
        return self._burned_supply

    @burned_supply.setter
    def burned_supply(self, burned_supply):
        """Sets the burned_supply of this TokenSeriesResult.


        :param burned_supply: The burned_supply of this TokenSeriesResult.  # noqa: E501
        :type: str
        """

        self._burned_supply = burned_supply

    @property
    def mode(self):
        """Gets the mode of this TokenSeriesResult.  # noqa: E501


        :return: The mode of this TokenSeriesResult.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this TokenSeriesResult.


        :param mode: The mode of this TokenSeriesResult.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def script(self):
        """Gets the script of this TokenSeriesResult.  # noqa: E501


        :return: The script of this TokenSeriesResult.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this TokenSeriesResult.


        :param script: The script of this TokenSeriesResult.  # noqa: E501
        :type: str
        """

        self._script = script

    @property
    def methods(self):
        """Gets the methods of this TokenSeriesResult.  # noqa: E501


        :return: The methods of this TokenSeriesResult.  # noqa: E501
        :rtype: list[ABIMethodResult]
        """
        return self._methods

    @methods.setter
    def methods(self, methods):
        """Sets the methods of this TokenSeriesResult.


        :param methods: The methods of this TokenSeriesResult.  # noqa: E501
        :type: list[ABIMethodResult]
        """

        self._methods = methods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenSeriesResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenSeriesResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
