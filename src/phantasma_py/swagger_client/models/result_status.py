# coding: utf-8

"""
    Phantasma API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResultStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_info': 'NodeInfo',
        'sync_info': 'ResultStatusSyncInfo',
        'validator_info': 'ResultStatusValidatorInfo'
    }

    attribute_map = {
        'node_info': 'nodeInfo',
        'sync_info': 'syncInfo',
        'validator_info': 'validatorInfo'
    }

    def __init__(self, node_info=None, sync_info=None, validator_info=None):  # noqa: E501
        """ResultStatus - a model defined in Swagger"""  # noqa: E501
        self._node_info = None
        self._sync_info = None
        self._validator_info = None
        self.discriminator = None
        if node_info is not None:
            self.node_info = node_info
        if sync_info is not None:
            self.sync_info = sync_info
        if validator_info is not None:
            self.validator_info = validator_info

    @property
    def node_info(self):
        """Gets the node_info of this ResultStatus.  # noqa: E501


        :return: The node_info of this ResultStatus.  # noqa: E501
        :rtype: NodeInfo
        """
        return self._node_info

    @node_info.setter
    def node_info(self, node_info):
        """Sets the node_info of this ResultStatus.


        :param node_info: The node_info of this ResultStatus.  # noqa: E501
        :type: NodeInfo
        """

        self._node_info = node_info

    @property
    def sync_info(self):
        """Gets the sync_info of this ResultStatus.  # noqa: E501


        :return: The sync_info of this ResultStatus.  # noqa: E501
        :rtype: ResultStatusSyncInfo
        """
        return self._sync_info

    @sync_info.setter
    def sync_info(self, sync_info):
        """Sets the sync_info of this ResultStatus.


        :param sync_info: The sync_info of this ResultStatus.  # noqa: E501
        :type: ResultStatusSyncInfo
        """

        self._sync_info = sync_info

    @property
    def validator_info(self):
        """Gets the validator_info of this ResultStatus.  # noqa: E501


        :return: The validator_info of this ResultStatus.  # noqa: E501
        :rtype: ResultStatusValidatorInfo
        """
        return self._validator_info

    @validator_info.setter
    def validator_info(self, validator_info):
        """Sets the validator_info of this ResultStatus.


        :param validator_info: The validator_info of this ResultStatus.  # noqa: E501
        :type: ResultStatusValidatorInfo
        """

        self._validator_info = validator_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResultStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
