# coding: utf-8

"""
    Phantasma API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TokenResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'name': 'str',
        'decimals': 'int',
        'current_supply': 'str',
        'max_supply': 'str',
        'burned_supply': 'str',
        'address': 'str',
        'owner': 'str',
        'flags': 'str',
        'script': 'str',
        'series': 'list[TokenSeriesResult]',
        'external': 'list[TokenExternalResult]',
        'price': 'list[TokenPriceResult]'
    }

    attribute_map = {
        'symbol': 'symbol',
        'name': 'name',
        'decimals': 'decimals',
        'current_supply': 'currentSupply',
        'max_supply': 'maxSupply',
        'burned_supply': 'burnedSupply',
        'address': 'address',
        'owner': 'owner',
        'flags': 'flags',
        'script': 'script',
        'series': 'series',
        'external': 'external',
        'price': 'price'
    }

    def __init__(self, symbol=None, name=None, decimals=None, current_supply=None, max_supply=None, burned_supply=None, address=None, owner=None, flags=None, script=None, series=None, external=None, price=None):  # noqa: E501
        """TokenResult - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._name = None
        self._decimals = None
        self._current_supply = None
        self._max_supply = None
        self._burned_supply = None
        self._address = None
        self._owner = None
        self._flags = None
        self._script = None
        self._series = None
        self._external = None
        self._price = None
        self.discriminator = None
        if symbol is not None:
            self.symbol = symbol
        if name is not None:
            self.name = name
        if decimals is not None:
            self.decimals = decimals
        if current_supply is not None:
            self.current_supply = current_supply
        if max_supply is not None:
            self.max_supply = max_supply
        if burned_supply is not None:
            self.burned_supply = burned_supply
        if address is not None:
            self.address = address
        if owner is not None:
            self.owner = owner
        if flags is not None:
            self.flags = flags
        if script is not None:
            self.script = script
        if series is not None:
            self.series = series
        if external is not None:
            self.external = external
        if price is not None:
            self.price = price

    @property
    def symbol(self):
        """Gets the symbol of this TokenResult.  # noqa: E501


        :return: The symbol of this TokenResult.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this TokenResult.


        :param symbol: The symbol of this TokenResult.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def name(self):
        """Gets the name of this TokenResult.  # noqa: E501


        :return: The name of this TokenResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TokenResult.


        :param name: The name of this TokenResult.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def decimals(self):
        """Gets the decimals of this TokenResult.  # noqa: E501


        :return: The decimals of this TokenResult.  # noqa: E501
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this TokenResult.


        :param decimals: The decimals of this TokenResult.  # noqa: E501
        :type: int
        """

        self._decimals = decimals

    @property
    def current_supply(self):
        """Gets the current_supply of this TokenResult.  # noqa: E501


        :return: The current_supply of this TokenResult.  # noqa: E501
        :rtype: str
        """
        return self._current_supply

    @current_supply.setter
    def current_supply(self, current_supply):
        """Sets the current_supply of this TokenResult.


        :param current_supply: The current_supply of this TokenResult.  # noqa: E501
        :type: str
        """

        self._current_supply = current_supply

    @property
    def max_supply(self):
        """Gets the max_supply of this TokenResult.  # noqa: E501


        :return: The max_supply of this TokenResult.  # noqa: E501
        :rtype: str
        """
        return self._max_supply

    @max_supply.setter
    def max_supply(self, max_supply):
        """Sets the max_supply of this TokenResult.


        :param max_supply: The max_supply of this TokenResult.  # noqa: E501
        :type: str
        """

        self._max_supply = max_supply

    @property
    def burned_supply(self):
        """Gets the burned_supply of this TokenResult.  # noqa: E501


        :return: The burned_supply of this TokenResult.  # noqa: E501
        :rtype: str
        """
        return self._burned_supply

    @burned_supply.setter
    def burned_supply(self, burned_supply):
        """Sets the burned_supply of this TokenResult.


        :param burned_supply: The burned_supply of this TokenResult.  # noqa: E501
        :type: str
        """

        self._burned_supply = burned_supply

    @property
    def address(self):
        """Gets the address of this TokenResult.  # noqa: E501


        :return: The address of this TokenResult.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this TokenResult.


        :param address: The address of this TokenResult.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def owner(self):
        """Gets the owner of this TokenResult.  # noqa: E501


        :return: The owner of this TokenResult.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this TokenResult.


        :param owner: The owner of this TokenResult.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def flags(self):
        """Gets the flags of this TokenResult.  # noqa: E501


        :return: The flags of this TokenResult.  # noqa: E501
        :rtype: str
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this TokenResult.


        :param flags: The flags of this TokenResult.  # noqa: E501
        :type: str
        """

        self._flags = flags

    @property
    def script(self):
        """Gets the script of this TokenResult.  # noqa: E501


        :return: The script of this TokenResult.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this TokenResult.


        :param script: The script of this TokenResult.  # noqa: E501
        :type: str
        """

        self._script = script

    @property
    def series(self):
        """Gets the series of this TokenResult.  # noqa: E501


        :return: The series of this TokenResult.  # noqa: E501
        :rtype: list[TokenSeriesResult]
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this TokenResult.


        :param series: The series of this TokenResult.  # noqa: E501
        :type: list[TokenSeriesResult]
        """

        self._series = series

    @property
    def external(self):
        """Gets the external of this TokenResult.  # noqa: E501


        :return: The external of this TokenResult.  # noqa: E501
        :rtype: list[TokenExternalResult]
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this TokenResult.


        :param external: The external of this TokenResult.  # noqa: E501
        :type: list[TokenExternalResult]
        """

        self._external = external

    @property
    def price(self):
        """Gets the price of this TokenResult.  # noqa: E501


        :return: The price of this TokenResult.  # noqa: E501
        :rtype: list[TokenPriceResult]
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this TokenResult.


        :param price: The price of this TokenResult.  # noqa: E501
        :type: list[TokenPriceResult]
        """

        self._price = price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
