# coding: utf-8

"""
    Phantasma API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArchiveResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'hash': 'str',
        'time': 'int',
        'size': 'int',
        'encryption': 'str',
        'block_count': 'int',
        'missing_blocks': 'list[int]',
        'owners': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'hash': 'hash',
        'time': 'time',
        'size': 'size',
        'encryption': 'encryption',
        'block_count': 'blockCount',
        'missing_blocks': 'missingBlocks',
        'owners': 'owners'
    }

    def __init__(self, name=None, hash=None, time=None, size=None, encryption=None, block_count=None, missing_blocks=None, owners=None):  # noqa: E501
        """ArchiveResult - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._hash = None
        self._time = None
        self._size = None
        self._encryption = None
        self._block_count = None
        self._missing_blocks = None
        self._owners = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if hash is not None:
            self.hash = hash
        if time is not None:
            self.time = time
        if size is not None:
            self.size = size
        if encryption is not None:
            self.encryption = encryption
        if block_count is not None:
            self.block_count = block_count
        if missing_blocks is not None:
            self.missing_blocks = missing_blocks
        if owners is not None:
            self.owners = owners

    @property
    def name(self):
        """Gets the name of this ArchiveResult.  # noqa: E501


        :return: The name of this ArchiveResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArchiveResult.


        :param name: The name of this ArchiveResult.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def hash(self):
        """Gets the hash of this ArchiveResult.  # noqa: E501


        :return: The hash of this ArchiveResult.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this ArchiveResult.


        :param hash: The hash of this ArchiveResult.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def time(self):
        """Gets the time of this ArchiveResult.  # noqa: E501


        :return: The time of this ArchiveResult.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ArchiveResult.


        :param time: The time of this ArchiveResult.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def size(self):
        """Gets the size of this ArchiveResult.  # noqa: E501


        :return: The size of this ArchiveResult.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ArchiveResult.


        :param size: The size of this ArchiveResult.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def encryption(self):
        """Gets the encryption of this ArchiveResult.  # noqa: E501


        :return: The encryption of this ArchiveResult.  # noqa: E501
        :rtype: str
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this ArchiveResult.


        :param encryption: The encryption of this ArchiveResult.  # noqa: E501
        :type: str
        """

        self._encryption = encryption

    @property
    def block_count(self):
        """Gets the block_count of this ArchiveResult.  # noqa: E501


        :return: The block_count of this ArchiveResult.  # noqa: E501
        :rtype: int
        """
        return self._block_count

    @block_count.setter
    def block_count(self, block_count):
        """Sets the block_count of this ArchiveResult.


        :param block_count: The block_count of this ArchiveResult.  # noqa: E501
        :type: int
        """

        self._block_count = block_count

    @property
    def missing_blocks(self):
        """Gets the missing_blocks of this ArchiveResult.  # noqa: E501


        :return: The missing_blocks of this ArchiveResult.  # noqa: E501
        :rtype: list[int]
        """
        return self._missing_blocks

    @missing_blocks.setter
    def missing_blocks(self, missing_blocks):
        """Sets the missing_blocks of this ArchiveResult.


        :param missing_blocks: The missing_blocks of this ArchiveResult.  # noqa: E501
        :type: list[int]
        """

        self._missing_blocks = missing_blocks

    @property
    def owners(self):
        """Gets the owners of this ArchiveResult.  # noqa: E501


        :return: The owners of this ArchiveResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this ArchiveResult.


        :param owners: The owners of this ArchiveResult.  # noqa: E501
        :type: list[str]
        """

        self._owners = owners

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArchiveResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArchiveResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
