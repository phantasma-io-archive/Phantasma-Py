# coding: utf-8

"""
    Phantasma API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NexusResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'protocol': 'int',
        'platforms': 'list[PlatformResult]',
        'tokens': 'list[TokenResult]',
        'chains': 'list[ChainResult]',
        'governance': 'list[GovernanceResult]',
        'organizations': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'protocol': 'protocol',
        'platforms': 'platforms',
        'tokens': 'tokens',
        'chains': 'chains',
        'governance': 'governance',
        'organizations': 'organizations'
    }

    def __init__(self, name=None, protocol=None, platforms=None, tokens=None, chains=None, governance=None, organizations=None):  # noqa: E501
        """NexusResult - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._protocol = None
        self._platforms = None
        self._tokens = None
        self._chains = None
        self._governance = None
        self._organizations = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if protocol is not None:
            self.protocol = protocol
        if platforms is not None:
            self.platforms = platforms
        if tokens is not None:
            self.tokens = tokens
        if chains is not None:
            self.chains = chains
        if governance is not None:
            self.governance = governance
        if organizations is not None:
            self.organizations = organizations

    @property
    def name(self):
        """Gets the name of this NexusResult.  # noqa: E501


        :return: The name of this NexusResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NexusResult.


        :param name: The name of this NexusResult.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def protocol(self):
        """Gets the protocol of this NexusResult.  # noqa: E501


        :return: The protocol of this NexusResult.  # noqa: E501
        :rtype: int
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this NexusResult.


        :param protocol: The protocol of this NexusResult.  # noqa: E501
        :type: int
        """

        self._protocol = protocol

    @property
    def platforms(self):
        """Gets the platforms of this NexusResult.  # noqa: E501


        :return: The platforms of this NexusResult.  # noqa: E501
        :rtype: list[PlatformResult]
        """
        return self._platforms

    @platforms.setter
    def platforms(self, platforms):
        """Sets the platforms of this NexusResult.


        :param platforms: The platforms of this NexusResult.  # noqa: E501
        :type: list[PlatformResult]
        """

        self._platforms = platforms

    @property
    def tokens(self):
        """Gets the tokens of this NexusResult.  # noqa: E501


        :return: The tokens of this NexusResult.  # noqa: E501
        :rtype: list[TokenResult]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this NexusResult.


        :param tokens: The tokens of this NexusResult.  # noqa: E501
        :type: list[TokenResult]
        """

        self._tokens = tokens

    @property
    def chains(self):
        """Gets the chains of this NexusResult.  # noqa: E501


        :return: The chains of this NexusResult.  # noqa: E501
        :rtype: list[ChainResult]
        """
        return self._chains

    @chains.setter
    def chains(self, chains):
        """Sets the chains of this NexusResult.


        :param chains: The chains of this NexusResult.  # noqa: E501
        :type: list[ChainResult]
        """

        self._chains = chains

    @property
    def governance(self):
        """Gets the governance of this NexusResult.  # noqa: E501


        :return: The governance of this NexusResult.  # noqa: E501
        :rtype: list[GovernanceResult]
        """
        return self._governance

    @governance.setter
    def governance(self, governance):
        """Sets the governance of this NexusResult.


        :param governance: The governance of this NexusResult.  # noqa: E501
        :type: list[GovernanceResult]
        """

        self._governance = governance

    @property
    def organizations(self):
        """Gets the organizations of this NexusResult.  # noqa: E501


        :return: The organizations of this NexusResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this NexusResult.


        :param organizations: The organizations of this NexusResult.  # noqa: E501
        :type: list[str]
        """

        self._organizations = organizations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NexusResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NexusResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
