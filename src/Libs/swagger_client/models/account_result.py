# coding: utf-8

"""
    Phantasma API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'name': 'str',
        'stakes': 'StakeResult',
        'stake': 'str',
        'unclaimed': 'str',
        'relay': 'str',
        'validator': 'str',
        'storage': 'StorageResult',
        'balances': 'list[BalanceResult]',
        'txs': 'list[str]'
    }

    attribute_map = {
        'address': 'address',
        'name': 'name',
        'stakes': 'stakes',
        'stake': 'stake',
        'unclaimed': 'unclaimed',
        'relay': 'relay',
        'validator': 'validator',
        'storage': 'storage',
        'balances': 'balances',
        'txs': 'txs'
    }

    def __init__(self, address=None, name=None, stakes=None, stake=None, unclaimed=None, relay=None, validator=None, storage=None, balances=None, txs=None):  # noqa: E501
        """AccountResult - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._name = None
        self._stakes = None
        self._stake = None
        self._unclaimed = None
        self._relay = None
        self._validator = None
        self._storage = None
        self._balances = None
        self._txs = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if name is not None:
            self.name = name
        if stakes is not None:
            self.stakes = stakes
        if stake is not None:
            self.stake = stake
        if unclaimed is not None:
            self.unclaimed = unclaimed
        if relay is not None:
            self.relay = relay
        if validator is not None:
            self.validator = validator
        if storage is not None:
            self.storage = storage
        if balances is not None:
            self.balances = balances
        if txs is not None:
            self.txs = txs

    @property
    def address(self):
        """Gets the address of this AccountResult.  # noqa: E501


        :return: The address of this AccountResult.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AccountResult.


        :param address: The address of this AccountResult.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def name(self):
        """Gets the name of this AccountResult.  # noqa: E501


        :return: The name of this AccountResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountResult.


        :param name: The name of this AccountResult.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def stakes(self):
        """Gets the stakes of this AccountResult.  # noqa: E501


        :return: The stakes of this AccountResult.  # noqa: E501
        :rtype: StakeResult
        """
        return self._stakes

    @stakes.setter
    def stakes(self, stakes):
        """Sets the stakes of this AccountResult.


        :param stakes: The stakes of this AccountResult.  # noqa: E501
        :type: StakeResult
        """

        self._stakes = stakes

    @property
    def stake(self):
        """Gets the stake of this AccountResult.  # noqa: E501


        :return: The stake of this AccountResult.  # noqa: E501
        :rtype: str
        """
        return self._stake

    @stake.setter
    def stake(self, stake):
        """Sets the stake of this AccountResult.


        :param stake: The stake of this AccountResult.  # noqa: E501
        :type: str
        """

        self._stake = stake

    @property
    def unclaimed(self):
        """Gets the unclaimed of this AccountResult.  # noqa: E501


        :return: The unclaimed of this AccountResult.  # noqa: E501
        :rtype: str
        """
        return self._unclaimed

    @unclaimed.setter
    def unclaimed(self, unclaimed):
        """Sets the unclaimed of this AccountResult.


        :param unclaimed: The unclaimed of this AccountResult.  # noqa: E501
        :type: str
        """

        self._unclaimed = unclaimed

    @property
    def relay(self):
        """Gets the relay of this AccountResult.  # noqa: E501


        :return: The relay of this AccountResult.  # noqa: E501
        :rtype: str
        """
        return self._relay

    @relay.setter
    def relay(self, relay):
        """Sets the relay of this AccountResult.


        :param relay: The relay of this AccountResult.  # noqa: E501
        :type: str
        """

        self._relay = relay

    @property
    def validator(self):
        """Gets the validator of this AccountResult.  # noqa: E501


        :return: The validator of this AccountResult.  # noqa: E501
        :rtype: str
        """
        return self._validator

    @validator.setter
    def validator(self, validator):
        """Sets the validator of this AccountResult.


        :param validator: The validator of this AccountResult.  # noqa: E501
        :type: str
        """

        self._validator = validator

    @property
    def storage(self):
        """Gets the storage of this AccountResult.  # noqa: E501


        :return: The storage of this AccountResult.  # noqa: E501
        :rtype: StorageResult
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this AccountResult.


        :param storage: The storage of this AccountResult.  # noqa: E501
        :type: StorageResult
        """

        self._storage = storage

    @property
    def balances(self):
        """Gets the balances of this AccountResult.  # noqa: E501


        :return: The balances of this AccountResult.  # noqa: E501
        :rtype: list[BalanceResult]
        """
        return self._balances

    @balances.setter
    def balances(self, balances):
        """Sets the balances of this AccountResult.


        :param balances: The balances of this AccountResult.  # noqa: E501
        :type: list[BalanceResult]
        """

        self._balances = balances

    @property
    def txs(self):
        """Gets the txs of this AccountResult.  # noqa: E501


        :return: The txs of this AccountResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._txs

    @txs.setter
    def txs(self, txs):
        """Sets the txs of this AccountResult.


        :param txs: The txs of this AccountResult.  # noqa: E501
        :type: list[str]
        """

        self._txs = txs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
