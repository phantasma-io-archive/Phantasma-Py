# coding: utf-8

"""
    Phantasma API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetInfoPeerConnectionStatusChannel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'send_queue_capacity': 'str',
        'send_queue_size': 'str',
        'priority': 'str',
        'recently_sent': 'str'
    }

    attribute_map = {
        'id': 'id',
        'send_queue_capacity': 'sendQueueCapacity',
        'send_queue_size': 'sendQueueSize',
        'priority': 'priority',
        'recently_sent': 'recentlySent'
    }

    def __init__(self, id=None, send_queue_capacity=None, send_queue_size=None, priority=None, recently_sent=None):  # noqa: E501
        """NetInfoPeerConnectionStatusChannel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._send_queue_capacity = None
        self._send_queue_size = None
        self._priority = None
        self._recently_sent = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if send_queue_capacity is not None:
            self.send_queue_capacity = send_queue_capacity
        if send_queue_size is not None:
            self.send_queue_size = send_queue_size
        if priority is not None:
            self.priority = priority
        if recently_sent is not None:
            self.recently_sent = recently_sent

    @property
    def id(self):
        """Gets the id of this NetInfoPeerConnectionStatusChannel.  # noqa: E501


        :return: The id of this NetInfoPeerConnectionStatusChannel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NetInfoPeerConnectionStatusChannel.


        :param id: The id of this NetInfoPeerConnectionStatusChannel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def send_queue_capacity(self):
        """Gets the send_queue_capacity of this NetInfoPeerConnectionStatusChannel.  # noqa: E501


        :return: The send_queue_capacity of this NetInfoPeerConnectionStatusChannel.  # noqa: E501
        :rtype: str
        """
        return self._send_queue_capacity

    @send_queue_capacity.setter
    def send_queue_capacity(self, send_queue_capacity):
        """Sets the send_queue_capacity of this NetInfoPeerConnectionStatusChannel.


        :param send_queue_capacity: The send_queue_capacity of this NetInfoPeerConnectionStatusChannel.  # noqa: E501
        :type: str
        """

        self._send_queue_capacity = send_queue_capacity

    @property
    def send_queue_size(self):
        """Gets the send_queue_size of this NetInfoPeerConnectionStatusChannel.  # noqa: E501


        :return: The send_queue_size of this NetInfoPeerConnectionStatusChannel.  # noqa: E501
        :rtype: str
        """
        return self._send_queue_size

    @send_queue_size.setter
    def send_queue_size(self, send_queue_size):
        """Sets the send_queue_size of this NetInfoPeerConnectionStatusChannel.


        :param send_queue_size: The send_queue_size of this NetInfoPeerConnectionStatusChannel.  # noqa: E501
        :type: str
        """

        self._send_queue_size = send_queue_size

    @property
    def priority(self):
        """Gets the priority of this NetInfoPeerConnectionStatusChannel.  # noqa: E501


        :return: The priority of this NetInfoPeerConnectionStatusChannel.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this NetInfoPeerConnectionStatusChannel.


        :param priority: The priority of this NetInfoPeerConnectionStatusChannel.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def recently_sent(self):
        """Gets the recently_sent of this NetInfoPeerConnectionStatusChannel.  # noqa: E501


        :return: The recently_sent of this NetInfoPeerConnectionStatusChannel.  # noqa: E501
        :rtype: str
        """
        return self._recently_sent

    @recently_sent.setter
    def recently_sent(self, recently_sent):
        """Sets the recently_sent of this NetInfoPeerConnectionStatusChannel.


        :param recently_sent: The recently_sent of this NetInfoPeerConnectionStatusChannel.  # noqa: E501
        :type: str
        """

        self._recently_sent = recently_sent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetInfoPeerConnectionStatusChannel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetInfoPeerConnectionStatusChannel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
