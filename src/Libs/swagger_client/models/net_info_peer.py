# coding: utf-8

"""
    Phantasma API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetInfoPeer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_info': 'NodeInfo',
        'is_outbound': 'bool',
        'connection_status': 'NetInfoPeerConnectionStatus',
        'remote_ip': 'str'
    }

    attribute_map = {
        'node_info': 'nodeInfo',
        'is_outbound': 'isOutbound',
        'connection_status': 'connectionStatus',
        'remote_ip': 'remoteIp'
    }

    def __init__(self, node_info=None, is_outbound=None, connection_status=None, remote_ip=None):  # noqa: E501
        """NetInfoPeer - a model defined in Swagger"""  # noqa: E501
        self._node_info = None
        self._is_outbound = None
        self._connection_status = None
        self._remote_ip = None
        self.discriminator = None
        if node_info is not None:
            self.node_info = node_info
        if is_outbound is not None:
            self.is_outbound = is_outbound
        if connection_status is not None:
            self.connection_status = connection_status
        if remote_ip is not None:
            self.remote_ip = remote_ip

    @property
    def node_info(self):
        """Gets the node_info of this NetInfoPeer.  # noqa: E501


        :return: The node_info of this NetInfoPeer.  # noqa: E501
        :rtype: NodeInfo
        """
        return self._node_info

    @node_info.setter
    def node_info(self, node_info):
        """Sets the node_info of this NetInfoPeer.


        :param node_info: The node_info of this NetInfoPeer.  # noqa: E501
        :type: NodeInfo
        """

        self._node_info = node_info

    @property
    def is_outbound(self):
        """Gets the is_outbound of this NetInfoPeer.  # noqa: E501


        :return: The is_outbound of this NetInfoPeer.  # noqa: E501
        :rtype: bool
        """
        return self._is_outbound

    @is_outbound.setter
    def is_outbound(self, is_outbound):
        """Sets the is_outbound of this NetInfoPeer.


        :param is_outbound: The is_outbound of this NetInfoPeer.  # noqa: E501
        :type: bool
        """

        self._is_outbound = is_outbound

    @property
    def connection_status(self):
        """Gets the connection_status of this NetInfoPeer.  # noqa: E501


        :return: The connection_status of this NetInfoPeer.  # noqa: E501
        :rtype: NetInfoPeerConnectionStatus
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this NetInfoPeer.


        :param connection_status: The connection_status of this NetInfoPeer.  # noqa: E501
        :type: NetInfoPeerConnectionStatus
        """

        self._connection_status = connection_status

    @property
    def remote_ip(self):
        """Gets the remote_ip of this NetInfoPeer.  # noqa: E501


        :return: The remote_ip of this NetInfoPeer.  # noqa: E501
        :rtype: str
        """
        return self._remote_ip

    @remote_ip.setter
    def remote_ip(self, remote_ip):
        """Sets the remote_ip of this NetInfoPeer.


        :param remote_ip: The remote_ip of this NetInfoPeer.  # noqa: E501
        :type: str
        """

        self._remote_ip = remote_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetInfoPeer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetInfoPeer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
