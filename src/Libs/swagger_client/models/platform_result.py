# coding: utf-8

"""
    Phantasma API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlatformResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'platform': 'str',
        'chain': 'str',
        'fuel': 'str',
        'tokens': 'list[str]',
        'interop': 'list[InteropResult]'
    }

    attribute_map = {
        'platform': 'platform',
        'chain': 'chain',
        'fuel': 'fuel',
        'tokens': 'tokens',
        'interop': 'interop'
    }

    def __init__(self, platform=None, chain=None, fuel=None, tokens=None, interop=None):  # noqa: E501
        """PlatformResult - a model defined in Swagger"""  # noqa: E501
        self._platform = None
        self._chain = None
        self._fuel = None
        self._tokens = None
        self._interop = None
        self.discriminator = None
        if platform is not None:
            self.platform = platform
        if chain is not None:
            self.chain = chain
        if fuel is not None:
            self.fuel = fuel
        if tokens is not None:
            self.tokens = tokens
        if interop is not None:
            self.interop = interop

    @property
    def platform(self):
        """Gets the platform of this PlatformResult.  # noqa: E501


        :return: The platform of this PlatformResult.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this PlatformResult.


        :param platform: The platform of this PlatformResult.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def chain(self):
        """Gets the chain of this PlatformResult.  # noqa: E501


        :return: The chain of this PlatformResult.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this PlatformResult.


        :param chain: The chain of this PlatformResult.  # noqa: E501
        :type: str
        """

        self._chain = chain

    @property
    def fuel(self):
        """Gets the fuel of this PlatformResult.  # noqa: E501


        :return: The fuel of this PlatformResult.  # noqa: E501
        :rtype: str
        """
        return self._fuel

    @fuel.setter
    def fuel(self, fuel):
        """Sets the fuel of this PlatformResult.


        :param fuel: The fuel of this PlatformResult.  # noqa: E501
        :type: str
        """

        self._fuel = fuel

    @property
    def tokens(self):
        """Gets the tokens of this PlatformResult.  # noqa: E501


        :return: The tokens of this PlatformResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this PlatformResult.


        :param tokens: The tokens of this PlatformResult.  # noqa: E501
        :type: list[str]
        """

        self._tokens = tokens

    @property
    def interop(self):
        """Gets the interop of this PlatformResult.  # noqa: E501


        :return: The interop of this PlatformResult.  # noqa: E501
        :rtype: list[InteropResult]
        """
        return self._interop

    @interop.setter
    def interop(self, interop):
        """Sets the interop of this PlatformResult.


        :param interop: The interop of this PlatformResult.  # noqa: E501
        :type: list[InteropResult]
        """

        self._interop = interop

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlatformResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlatformResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
